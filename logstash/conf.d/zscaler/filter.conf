filter {

   if [message] =~ /^\s*$/ {

      drop { }

   } else {

       mutate {
         id => "zscalernss-web_target_index"
         add_field => { "[@metadata][target_index]" => "zscaler" }
         add_tag => ["zscaler"]
       }

       mutate {
         id => "zscalernss-web_logstash_rename_host_field"
         rename => {
           "host" => "[host][ip]"
         }
       }


       ruby {
         init => "require 'time'"
         code => "event.set('full_processing_start',Time.now());"
       }

       mutate {
           add_field => { "input.received_at" => "%{full_processing_start}" }
       }

       date {
         match => [ "received_at", "ISO8601" ]
         timezone => "UTC"
       }
       mutate {
         id => "zscaler_gsub"
         gsub => [
           "message", "^\"","",
           "message", "\"$", ""
         ]
       }

       csv {
           id => "zscaler_csv"
           separator => '","'
           quote_char => "\x00"
           skip_header => "true"
           columns => ["zscaler_timestamp","source.user.name","network.protocol","url.original","event.action","zscaler_zia.web.app.name","zscaler_zia.web.app.class","http.request.bytes","http.response.bytes","zscaler_zia.web.stime","zscaler_zia.web.ctime","zscaler_zia.web.url.class","zscaler_zia.web.url.category.super","zscaler_zia.web.url.category.sub","zscaler_zia.web.malware.category","zscaler_zia.web.threat.name","event.risk_score","zscaler_zia.web.dpl.engine","zscaler_zia.web.dpl.dictionaries","zscaler_zia.web.location","zscaler_zia.web.department","source.ip","destination.ip","http.request.method","http.response.status_code","user_agent.original","http.request.referrer","rule.type","rule.label","http.request.mime_type","zscaler_zia.web.unscannable.type","zscaler_zia.web.device.owner","zscaler_zia.web.device.hostname"]
           convert => {
             "zscaler_zia.web.ctime" => "integer"
             "http.request.bytes" => "integer"
             "http.response.bytes" => "integer"
             "zscaler_zia.web.stime" => "integer"
             "event.risk_score" => "integer"
           }
      }

    date {
      match => [ "zscaler_timestamp", "EE MMM dd HH:mm:ss yyyy","EE MMM  d HH:mm:ss yyyy" ]
      timezone => "UTC"
    }

    if  [http.response.status_code] == "NA" {
       mutate {
         remove_field => ["http.response.status_code"]
       }
    }


    if "_grokparsefailure" in [tags] or "_csvparsefailure" in [tags] or "_dateparsefailure" in [tags] {

       mutate {
         id => "zscaler_failed_processing"
         replace => { "[@metadata][target_index]" => "processing-failure" }
         remove_tag => ["_grokparsefailure", "_csvparsefailure", "_dateparsefailure"]
         add_tag => ["processing_failure"]
       }

    }
  }
}

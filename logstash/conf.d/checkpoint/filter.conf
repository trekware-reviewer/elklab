filter {

   mutate {
     id => "checkpoint_target_index"
     add_field => { "[@metadata][target_index]" => "checkpoint" }
   }
   mutate {
     id => "checkpoint_logstash_rename_host_field"
     rename => {"host" => "[host][ip]"}
   }
    ruby {
      init => "require 'time'"
      code => "event.set('full_processing_start',Time.now());"
    }

    mutate {
        add_field => { "input.received_at" => "%{full_processing_start}" }
        add_field => { "input.pipelines" => "checkpoint" }
    }

    mutate {
        rename => {
            "message" => "[event][original]"
            "host" => "[reporter][ip]"
            "port" => "[reporter][port]"
        }
    }

    if [type] == "checkpoint_le" {

        grok {
            match => {
                "[event][original]" => [
                    #cp_log_exporter format syslog
                    "<%{POSINT:[log][syslog][priority]:int}>%{POSINT:[log][syslog][version]:int} +%{TIMESTAMP_ISO8601:timestamp} +%{HOSTNAME:[observer][ip]} +%{USERNAME:[checkpoint][moniker]} +%{NOTSPACE:[process][id]:int} +- +\[%{GREEDYDATA:message}[; \]|\]]"
                ]
            }
        }
    } else {
        mutate {
            add_tag => "invalid_checkpoint_type"
        }
    }


    mutate {
        gsub => [
            'message', ':\"\"', ':"',
            'message', '\"\";', '";'
        ]
    }

    kv {
        source => "message"
        field_split => ";"
        value_split => ":"
        include_brackets => false
        target => "checkpoint"
        transform_key => "lowercase"
        remove_char_key => "\\\s\t <>"
        remove_char_value => "\t<>"
    }

    if [checkpoint][__policy_id_tag] {
        grok {
            #patterns_dir => ["/etc/logstash/patterns"]
            pattern_definitions => { "CP_NONTOKEN" => "(?:[^\[\];:=]+)" }
            match => {
                "[checkpoint][__policy_id_tag]" => [
                    "product=%{CP_NONTOKEN:[@metadata][policy_id_product]}\[%{GREEDYDATA:[@metadata][policy_id]}.\]"
                ]
            }
        }

        kv {
            source => "[@metadata][policy_id]"
            field_split => ";"
            value_split => "="
            include_brackets => false
            target => "[checkpoint][policy_id]"
            transform_key => "lowercase"
            remove_char_key => "\\\s\t <>"
            remove_char_value => "\\\s\t <>"
            add_field => { "[checkpoint][policy_id][product]" => "%{[@metadata][policy_id_product]}" }
            remove_field => [ "[checkpoint][__policy_id_tag]" ]
        }
    }
    
    date {
        match => [ "timestamp", "ddMMMyyyy HH:mm:ss", "ddMMMyyyy  H:mm:ss", "ISO8601"]
        remove_field => [ "timestamp" ]
    }

    if [checkpoint][product] { ## Change [type] to product minus difficult chars
        mutate {
            replace => { "type" => "%{[checkpoint][product]}" }
            gsub => [ "type", "\s+", "", "type", "[^A-Za-z0-9_-]+", "." ]
        }
    }

    if [checkpoint][policy] {
        mutate {
            rename => { "[checkpoint][policy]" => "[checkpoint][policy][name]" }
        }
    }

    ## Unify field names according to Check Point module from filebeat and ECS

    mutate {
        rename => {
            "[checkpoint][action]" => "[event][action]"
            "[checkpoint][app_risk]" => "[event][risk_score]"
            "[checkpoint][appi_name]" => "[network][application]"
            "[checkpoint][bytes]" => "[network][bytes]"
            "[checkpoint][client_inbound_interface]" => "[observer][ingress][interface][name]"
            "[checkpoint][client_outbound_bytes]" => "[source][bytes]"
            "[checkpoint][client_outbound_interface]" => "[observer][egress][interface][name]"
            "[checkpoint][client_outbound_packets]" => "[source][packets]"
            "[checkpoint][conn_direction]" => "[network][direction]"
            "[checkpoint][dns_query]" => "[dns][query]"
            "[checkpoint][dns_type]" => "[dns][question][type]"
            "[checkpoint][dst]" => "[destination][ip]"
            "[checkpoint][dst_domain_name]" => "[destination][domain]"
            "[checkpoint][ifdir]" => "[network][direction]"
            "[checkpoint][security_inzone]" => "[observer][ingress][zone]"
            "[checkpoint][logid]" => "[checkpoint][logid]"
            "[checkpoint][loguid]" => "[event][id]"
            "[checkpoint][match_id]" => "[checkpoint][match_id]"
            "[checkpoint][nat_rulenum]" => "[rule][id]"
            "[checkpoint][origin]" => "[observer][ip]"
            "[checkpoint][origin_sic_name]" => "[checkpoint][origin_sic_name]"
            "[checkpoint][originsicname]" => "[checkpoint][origin_sic_name]"
            "[checkpoint][security_outzone]" => "[observer][egress][zone]"
            "[checkpoint][packets]" => "[network][packets]"
            "[checkpoint][parent_rule]" => "[checkpoint][parent_rule]"
            "[checkpoint][policy_id][mgmt]" => "[checkpoint][policy][domain]"
            "[checkpoint][policy_id][policy_name]" => "[checkpoint][policy][name]"
            "[checkpoint][product]" => "[observer][product]"
            "[checkpoint][proto]" => "[network][iana_number]"
            "[checkpoint][protocol]" => "[network][protocol]"
            "[checkpoint][reason]" => "[checkpoint][termination_reason]"
            "[checkpoint][received][bytes]" => "[destination][bytes]"
            "[checkpoint][rule_action]" => "[rule][action]"
            "[checkpoint][rule_name]" => "[rule][name]"
            "[checkpoint][rule_uid]" => "[rule][uuid]"
            "[checkpoint][s_port]" => "[source][port]"
            "[checkpoint][sent_bytes]" => "[source][bytes]"
            "[checkpoint][sequencenum]" => "[event][sequence]"
            "[checkpoint][server_outbound_bytes]" => "[destination][bytes]"
            "[checkpoint][server_outbound_packets]" => "[destination][packets]"
            "[checkpoint][service]" => "[destination][port]"
            "[checkpoint][service_id]" => "[network][application]"
            "[checkpoint][src]" => "[source][ip]"
            "[checkpoint][src_machine_name]" => "[source][domain]"
            "[checkpoint][start_time]" => "[event][start]"
            "[checkpoint][xlatedport]" => "[destination][nat][port]"
            "[checkpoint][xlatedst]" => "[destination][nat][ip]"
            "[checkpoint][xlatesport]" => "[source][nat][port]"
            "[checkpoint][xlatesrc]" => "[source][nat][ip]"
        }
        copy => {
            "[reporter][ip]" => "[reporter][name]"
        }
    }

    translate {
        field => "[network][iana_number]"
        destination => "[network][transport]"
        dictionary => {
          "1" => "icmp"
          "2" => "igmp"
          "6" => "tcp"
          "17" => "udp"
        }
        fallback => "no_mapping"
    }

    if [checkpoint][origin_sic_name] {
        grok {
            match => {
                # Here we use the USERNAME pattern instead of HOSTNAME because the "_" is messing up with "\b" in HOSTNAME pattern
                "[checkpoint][origin_sic_name]" => [ "CN=%{HOSTNAME:[checkpoint][firewall][physical]}_%{USERNAME:[observer][name]}" ]
            }
            tag_on_failure => ["_originsicnameparsefailure"]
        }
    }
}
